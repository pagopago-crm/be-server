prompt:
  qa-test: |
    당신은 숙련된 QA 엔지니어입니다. 제가 제공하는 코드를 자세히 분석하여 테스트 케이스 문서를 작성해주세요.

    코드 분석 후 다음 내용을 포함한 마크다운 형식의 테스트 문서를 생성해주세요:

    # 1. 코드 개요
    - 제공된 코드의 주요 목적과 기능 설명
    - 핵심 클래스/메소드와 그 역할
    - 사용된 주요 기술과 패턴

    # 2. 테스트 전략
    - 테스트 접근 방식 설명
    - 테스트 범위 및 우선순위

    # 3. 테스트 케이스
    아래 형식의 표로 작성해주세요:
    | ID | 테스트 항목 | 초기 조건 | 테스트 단계 | 예상 결과 | 테스트 유형 | 우선순위 |
    |---|------------|---------|-----------|----------|-----------|---------|
    | TC001 | ... | ... | ... | ... | 단위/통합/기능 | 상/중/하 |

    # 4. 엣지 케이스 및 예외 상황
    - 경계값, 예외 상황 등 특별히 테스트해야 할 케이스들

    # 5. 잠재적 문제점 및 개선사항
    - 코드 품질, 성능, 보안 측면에서 문제가 될 수 있는 부분
    - 코드 구조, 예외 처리, 테스트 용이성 등의 개선 제안

    # 6. 결론 및 요약
    - 테스트 케이스의 종합적 평가
    - 주요 테스트 포인트 요약

    요청한 형식을 엄격히 준수하면서, 실제 QA 전문가가 작성한 것 같은 상세하고 전문적인 테스트 문서를 작성해주세요. 테스트 케이스는 실행 가능하고 구체적이어야 합니다.

  source-analyze: |
    다음은 base64로 인코딩된 소스코드 파일입니다.
    
     Base64 인코딩된 소스코드:
     %s
  
     위 base64 문자열을 디코딩하여 소스코드를 분석하고 다음 내용을 제공해주세요:
    
      [제공할 내용]
      - 코드의 주요 기능과 목적
      
      [유의사항]
      - 해당 서비스가 어떤 기능을 하는지 작성해주세요.
      - 소스코드로 어떠한 기능을 동작하는 부분인지 작성해주세요.
      - 분석결과는 상세하고 구체적으로 작성해주세요.
      - 결과는 텍스트형식이어야 합니다, #,* 과 같은 마크업 문법은 제외시켜주세요
      - 해당 응답내용은 RAG내 서비스 정보 검색에 사용할 예정으로, 검색이 잘 되는 형식으로 응답해주세요

  rag-qa-test: |
    당신은 숙련된 QA 엔지니어입니다. 제가 제공하는 코드를 자세히 분석하여 테스트 케이스 문서를 작성해주세요.
    
    [제공 소스코드]
    다음 소스코드를 기반으로 테스트 케이스를 생성해주세요.
    소스코드는 base64로 인코딩 되어있습니다.
    %s
    
    [관련 참고 자료]
    다음 자료는 애플리케이션의 화면에 대한 정보를 분석해서 설명한 내용입니다.
    소스코드를 기반으로 테스트 케이스를 생성할때 참고해서, 소스코드와 연관되어 테스트가 필요하다고 판단되면 테스트 케이스를 만들어주세요.
    %s

    [응답 형식]
    코드 분석 후 다음 내용을 포함한 마크다운 형식의 테스트 문서를 생성해주세요:

    # 1. 코드 개요
    - 제공된 코드의 주요 목적과 기능 설명
    - 핵심 클래스/메소드와 그 역할
    - 사용된 주요 기술과 패턴

    # 2. 테스트 전략
    - 테스트 접근 방식 설명
    - 테스트 범위 및 우선순위

    # 3. 테스트 케이스
    아래 형식의 표로 작성해주세요:
    | ID | 테스트 항목 | 초기 조건 | 테스트 단계 | 예상 결과 | 테스트 유형 | 우선순위 |
    |---|------------|---------|-----------|----------|-----------|---------|
    | TC001 | ... | ... | ... | ... | 단위/통합/기능 | 상/중/하 |

    # 4. 엣지 케이스 및 예외 상황
    - 경계값, 예외 상황 등 특별히 테스트해야 할 케이스들

    # 5. 잠재적 문제점 및 개선사항
    - 코드 품질, 성능, 보안 측면에서 문제가 될 수 있는 부분
    - 코드 구조, 예외 처리, 테스트 용이성 등의 개선 제안

    # 6. 결론 및 요약
    - 테스트 케이스의 종합적 평가
    - 주요 테스트 포인트 요약