name: ci

on:
  push:
    branches: ["main"]
#  pull_request:
#    branches: ["main"]

permissions: write-all

env:
  DOCKER_IMAGE: sh80165/app_automation
  # DOCKER_IMAGE_VERSION: ${{ GITHUB_SHA }}
  MANIFEST_REPO: pagopago-crm/doc-manifest
  MANIFEST_FILE_PATH: backend/deployment.yaml

jobs:
  build-push:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.docker-version.outputs.NEW_TAG }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test --stacktrace

      # 테스트 후 Result를 보기위해 Publish Unit Test Results step 추가
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: ${{ always() }}  # 테스트가 실패하여도 Report를 보기 위해 `always`로 설정
        with:
          files: build/test-results/**/*.xml

      - name: Get Docker next version
        id: docker-version
        run : |
          # Docker Hub에서 태그 목록을 가져오기
          NEW_TAG=$(TZ='Asia/Seoul' date +"%Y%m%d%H%M")
          
           echo "NEW_TAG=$NEW_TAG" >> "$GITHUB_OUTPUT"
          
          echo "New tag to be created: $NEW_TAG"

      - name: Docker build
        run: |
          echo "NEW_TAG: ${{ steps.docker-version.outputs.NEW_TAG }}"
          docker build --platform linux/amd64 -t "${{ env.DOCKER_IMAGE }}:${{ steps.docker-version.outputs.NEW_TAG }}" .

      - name: Dockerhub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push docker image to docker hub
        run: docker push "${{ env.DOCKER_IMAGE }}:${{ steps.docker-version.outputs.NEW_TAG }}"

  update-deployment:
    needs: build-push
    runs-on: ubuntu-latest

    steps:
      - name: Update private deployment repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MANIFEST_REPO }}  # 실제 private CD 레포 이름으로 변경
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}  # private repo 접근용
          path: deployment

      - name: Update image tag with Kustomize
        run: |
          cd deployment

          # sed로 이미지 태그 업데이트
          sed -i "s|${{ env.DOCKER_IMAGE }}:.*|${{ env.DOCKER_IMAGE }}:${{ needs.build-push.outputs.new_tag }}|g" ${{ env.MANIFEST_FILE_PATH }}

          git config user.name "lsh9672"
          git config user.email "lsh80165@gmail.com"
          git add .
          git commit -m "Feat : Update text-to-sql image to ${{ github.sha }}"
          git push origin main